// Code generated by "enumer -type=ScannerComponent -yaml"; DO NOT EDIT.

package scannerconfig

import (
	"fmt"
	"strings"
)

const _ScannerComponentName = "DefaultBluetooth"

var _ScannerComponentIndex = [...]uint8{0, 7, 16}

const _ScannerComponentLowerName = "defaultbluetooth"

func (i ScannerComponent) String() string {
	if i >= ScannerComponent(len(_ScannerComponentIndex)-1) {
		return fmt.Sprintf("ScannerComponent(%d)", i)
	}
	return _ScannerComponentName[_ScannerComponentIndex[i]:_ScannerComponentIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ScannerComponentNoOp() {
	var x [1]struct{}
	_ = x[Default-(0)]
	_ = x[Bluetooth-(1)]
}

var _ScannerComponentValues = []ScannerComponent{Default, Bluetooth}

var _ScannerComponentNameToValueMap = map[string]ScannerComponent{
	_ScannerComponentName[0:7]:       Default,
	_ScannerComponentLowerName[0:7]:  Default,
	_ScannerComponentName[7:16]:      Bluetooth,
	_ScannerComponentLowerName[7:16]: Bluetooth,
}

var _ScannerComponentNames = []string{
	_ScannerComponentName[0:7],
	_ScannerComponentName[7:16],
}

// ScannerComponentString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ScannerComponentString(s string) (ScannerComponent, error) {
	if val, ok := _ScannerComponentNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ScannerComponentNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ScannerComponent values", s)
}

// ScannerComponentValues returns all values of the enum
func ScannerComponentValues() []ScannerComponent {
	return _ScannerComponentValues
}

// ScannerComponentStrings returns a slice of all String values of the enum
func ScannerComponentStrings() []string {
	strs := make([]string, len(_ScannerComponentNames))
	copy(strs, _ScannerComponentNames)
	return strs
}

// IsAScannerComponent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ScannerComponent) IsAScannerComponent() bool {
	for _, v := range _ScannerComponentValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for ScannerComponent
func (i ScannerComponent) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ScannerComponent
func (i *ScannerComponent) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ScannerComponentString(s)
	return err
}
