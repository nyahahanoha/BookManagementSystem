// Code generated by "enumer -type=ObjectComponent -yaml"; DO NOT EDIT.

package storeconfig

import (
	"fmt"
	"strings"
)

const _ObjectComponentName = "FileSystem"

var _ObjectComponentIndex = [...]uint8{0, 10}

const _ObjectComponentLowerName = "filesystem"

func (i ObjectComponent) String() string {
	if i >= ObjectComponent(len(_ObjectComponentIndex)-1) {
		return fmt.Sprintf("ObjectComponent(%d)", i)
	}
	return _ObjectComponentName[_ObjectComponentIndex[i]:_ObjectComponentIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ObjectComponentNoOp() {
	var x [1]struct{}
	_ = x[FileSystem-(0)]
}

var _ObjectComponentValues = []ObjectComponent{FileSystem}

var _ObjectComponentNameToValueMap = map[string]ObjectComponent{
	_ObjectComponentName[0:10]:      FileSystem,
	_ObjectComponentLowerName[0:10]: FileSystem,
}

var _ObjectComponentNames = []string{
	_ObjectComponentName[0:10],
}

// ObjectComponentString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ObjectComponentString(s string) (ObjectComponent, error) {
	if val, ok := _ObjectComponentNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ObjectComponentNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ObjectComponent values", s)
}

// ObjectComponentValues returns all values of the enum
func ObjectComponentValues() []ObjectComponent {
	return _ObjectComponentValues
}

// ObjectComponentStrings returns a slice of all String values of the enum
func ObjectComponentStrings() []string {
	strs := make([]string, len(_ObjectComponentNames))
	copy(strs, _ObjectComponentNames)
	return strs
}

// IsAObjectComponent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ObjectComponent) IsAObjectComponent() bool {
	for _, v := range _ObjectComponentValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for ObjectComponent
func (i ObjectComponent) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ObjectComponent
func (i *ObjectComponent) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ObjectComponentString(s)
	return err
}
