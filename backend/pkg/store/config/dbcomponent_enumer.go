// Code generated by "enumer -type=DBComponent -yaml"; DO NOT EDIT.

package storeconfig

import (
	"fmt"
	"strings"
)

const _DBComponentName = "MySQLPostgreSQL"

var _DBComponentIndex = [...]uint8{0, 5, 15}

const _DBComponentLowerName = "mysqlpostgresql"

func (i DBComponent) String() string {
	if i >= DBComponent(len(_DBComponentIndex)-1) {
		return fmt.Sprintf("DBComponent(%d)", i)
	}
	return _DBComponentName[_DBComponentIndex[i]:_DBComponentIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DBComponentNoOp() {
	var x [1]struct{}
	_ = x[MySQL-(0)]
	_ = x[PostgreSQL-(1)]
}

var _DBComponentValues = []DBComponent{MySQL, PostgreSQL}

var _DBComponentNameToValueMap = map[string]DBComponent{
	_DBComponentName[0:5]:       MySQL,
	_DBComponentLowerName[0:5]:  MySQL,
	_DBComponentName[5:15]:      PostgreSQL,
	_DBComponentLowerName[5:15]: PostgreSQL,
}

var _DBComponentNames = []string{
	_DBComponentName[0:5],
	_DBComponentName[5:15],
}

// DBComponentString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DBComponentString(s string) (DBComponent, error) {
	if val, ok := _DBComponentNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DBComponentNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DBComponent values", s)
}

// DBComponentValues returns all values of the enum
func DBComponentValues() []DBComponent {
	return _DBComponentValues
}

// DBComponentStrings returns a slice of all String values of the enum
func DBComponentStrings() []string {
	strs := make([]string, len(_DBComponentNames))
	copy(strs, _DBComponentNames)
	return strs
}

// IsADBComponent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DBComponent) IsADBComponent() bool {
	for _, v := range _DBComponentValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for DBComponent
func (i DBComponent) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DBComponent
func (i *DBComponent) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DBComponentString(s)
	return err
}
