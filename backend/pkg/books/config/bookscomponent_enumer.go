// Code generated by "enumer -type=BooksComponent -yaml"; DO NOT EDIT.

package booksconfig

import (
	"fmt"
	"strings"
)

const _BooksComponentName = "GoogleNDL"

var _BooksComponentIndex = [...]uint8{0, 6, 9}

const _BooksComponentLowerName = "googlendl"

func (i BooksComponent) String() string {
	if i >= BooksComponent(len(_BooksComponentIndex)-1) {
		return fmt.Sprintf("BooksComponent(%d)", i)
	}
	return _BooksComponentName[_BooksComponentIndex[i]:_BooksComponentIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BooksComponentNoOp() {
	var x [1]struct{}
	_ = x[Google-(0)]
	_ = x[NDL-(1)]
}

var _BooksComponentValues = []BooksComponent{Google, NDL}

var _BooksComponentNameToValueMap = map[string]BooksComponent{
	_BooksComponentName[0:6]:      Google,
	_BooksComponentLowerName[0:6]: Google,
	_BooksComponentName[6:9]:      NDL,
	_BooksComponentLowerName[6:9]: NDL,
}

var _BooksComponentNames = []string{
	_BooksComponentName[0:6],
	_BooksComponentName[6:9],
}

// BooksComponentString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BooksComponentString(s string) (BooksComponent, error) {
	if val, ok := _BooksComponentNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BooksComponentNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BooksComponent values", s)
}

// BooksComponentValues returns all values of the enum
func BooksComponentValues() []BooksComponent {
	return _BooksComponentValues
}

// BooksComponentStrings returns a slice of all String values of the enum
func BooksComponentStrings() []string {
	strs := make([]string, len(_BooksComponentNames))
	copy(strs, _BooksComponentNames)
	return strs
}

// IsABooksComponent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BooksComponent) IsABooksComponent() bool {
	for _, v := range _BooksComponentValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for BooksComponent
func (i BooksComponent) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for BooksComponent
func (i *BooksComponent) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = BooksComponentString(s)
	return err
}
