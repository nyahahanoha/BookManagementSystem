// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: book_management_system/v1/book.proto

package book_management_systemv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/BookManagementSystem/backend/api/book_management_system/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BookManagementServiceName is the fully-qualified name of the BookManagementService service.
	BookManagementServiceName = "book_management_system.v1.BookManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookManagementServicePutBookProcedure is the fully-qualified name of the BookManagementService's
	// PutBook RPC.
	BookManagementServicePutBookProcedure = "/book_management_system.v1.BookManagementService/PutBook"
	// BookManagementServiceRenameBookProcedure is the fully-qualified name of the
	// BookManagementService's RenameBook RPC.
	BookManagementServiceRenameBookProcedure = "/book_management_system.v1.BookManagementService/RenameBook"
	// BookManagementServiceDeleteBookProcedure is the fully-qualified name of the
	// BookManagementService's DeleteBook RPC.
	BookManagementServiceDeleteBookProcedure = "/book_management_system.v1.BookManagementService/DeleteBook"
)

// BookManagementServiceClient is a client for the book_management_system.v1.BookManagementService
// service.
type BookManagementServiceClient interface {
	PutBook(context.Context, *connect.Request[v1.PutBookRequest]) (*connect.Response[v1.PutBookResponse], error)
	RenameBook(context.Context, *connect.Request[v1.RenameBookRequest]) (*connect.Response[v1.RenameBookResponse], error)
	DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error)
}

// NewBookManagementServiceClient constructs a client for the
// book_management_system.v1.BookManagementService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BookManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bookManagementServiceMethods := v1.File_book_management_system_v1_book_proto.Services().ByName("BookManagementService").Methods()
	return &bookManagementServiceClient{
		putBook: connect.NewClient[v1.PutBookRequest, v1.PutBookResponse](
			httpClient,
			baseURL+BookManagementServicePutBookProcedure,
			connect.WithSchema(bookManagementServiceMethods.ByName("PutBook")),
			connect.WithClientOptions(opts...),
		),
		renameBook: connect.NewClient[v1.RenameBookRequest, v1.RenameBookResponse](
			httpClient,
			baseURL+BookManagementServiceRenameBookProcedure,
			connect.WithSchema(bookManagementServiceMethods.ByName("RenameBook")),
			connect.WithClientOptions(opts...),
		),
		deleteBook: connect.NewClient[v1.DeleteBookRequest, v1.DeleteBookResponse](
			httpClient,
			baseURL+BookManagementServiceDeleteBookProcedure,
			connect.WithSchema(bookManagementServiceMethods.ByName("DeleteBook")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bookManagementServiceClient implements BookManagementServiceClient.
type bookManagementServiceClient struct {
	putBook    *connect.Client[v1.PutBookRequest, v1.PutBookResponse]
	renameBook *connect.Client[v1.RenameBookRequest, v1.RenameBookResponse]
	deleteBook *connect.Client[v1.DeleteBookRequest, v1.DeleteBookResponse]
}

// PutBook calls book_management_system.v1.BookManagementService.PutBook.
func (c *bookManagementServiceClient) PutBook(ctx context.Context, req *connect.Request[v1.PutBookRequest]) (*connect.Response[v1.PutBookResponse], error) {
	return c.putBook.CallUnary(ctx, req)
}

// RenameBook calls book_management_system.v1.BookManagementService.RenameBook.
func (c *bookManagementServiceClient) RenameBook(ctx context.Context, req *connect.Request[v1.RenameBookRequest]) (*connect.Response[v1.RenameBookResponse], error) {
	return c.renameBook.CallUnary(ctx, req)
}

// DeleteBook calls book_management_system.v1.BookManagementService.DeleteBook.
func (c *bookManagementServiceClient) DeleteBook(ctx context.Context, req *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error) {
	return c.deleteBook.CallUnary(ctx, req)
}

// BookManagementServiceHandler is an implementation of the
// book_management_system.v1.BookManagementService service.
type BookManagementServiceHandler interface {
	PutBook(context.Context, *connect.Request[v1.PutBookRequest]) (*connect.Response[v1.PutBookResponse], error)
	RenameBook(context.Context, *connect.Request[v1.RenameBookRequest]) (*connect.Response[v1.RenameBookResponse], error)
	DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error)
}

// NewBookManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookManagementServiceHandler(svc BookManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bookManagementServiceMethods := v1.File_book_management_system_v1_book_proto.Services().ByName("BookManagementService").Methods()
	bookManagementServicePutBookHandler := connect.NewUnaryHandler(
		BookManagementServicePutBookProcedure,
		svc.PutBook,
		connect.WithSchema(bookManagementServiceMethods.ByName("PutBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookManagementServiceRenameBookHandler := connect.NewUnaryHandler(
		BookManagementServiceRenameBookProcedure,
		svc.RenameBook,
		connect.WithSchema(bookManagementServiceMethods.ByName("RenameBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookManagementServiceDeleteBookHandler := connect.NewUnaryHandler(
		BookManagementServiceDeleteBookProcedure,
		svc.DeleteBook,
		connect.WithSchema(bookManagementServiceMethods.ByName("DeleteBook")),
		connect.WithHandlerOptions(opts...),
	)
	return "/book_management_system.v1.BookManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookManagementServicePutBookProcedure:
			bookManagementServicePutBookHandler.ServeHTTP(w, r)
		case BookManagementServiceRenameBookProcedure:
			bookManagementServiceRenameBookHandler.ServeHTTP(w, r)
		case BookManagementServiceDeleteBookProcedure:
			bookManagementServiceDeleteBookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookManagementServiceHandler struct{}

func (UnimplementedBookManagementServiceHandler) PutBook(context.Context, *connect.Request[v1.PutBookRequest]) (*connect.Response[v1.PutBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book_management_system.v1.BookManagementService.PutBook is not implemented"))
}

func (UnimplementedBookManagementServiceHandler) RenameBook(context.Context, *connect.Request[v1.RenameBookRequest]) (*connect.Response[v1.RenameBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book_management_system.v1.BookManagementService.RenameBook is not implemented"))
}

func (UnimplementedBookManagementServiceHandler) DeleteBook(context.Context, *connect.Request[v1.DeleteBookRequest]) (*connect.Response[v1.DeleteBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("book_management_system.v1.BookManagementService.DeleteBook is not implemented"))
}
