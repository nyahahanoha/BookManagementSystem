// Code generated by "enumer -type=Language"; DO NOT EDIT.

package bookscommon

import (
	"fmt"
	"strings"
)

const _LanguageName = "UNKOWNJPEN"

var _LanguageIndex = [...]uint8{0, 6, 8, 10}

const _LanguageLowerName = "unkownjpen"

func (i Language) String() string {
	if i < 0 || i >= Language(len(_LanguageIndex)-1) {
		return fmt.Sprintf("Language(%d)", i)
	}
	return _LanguageName[_LanguageIndex[i]:_LanguageIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LanguageNoOp() {
	var x [1]struct{}
	_ = x[UNKOWN-(0)]
	_ = x[JP-(1)]
	_ = x[EN-(2)]
}

var _LanguageValues = []Language{UNKOWN, JP, EN}

var _LanguageNameToValueMap = map[string]Language{
	_LanguageName[0:6]:       UNKOWN,
	_LanguageLowerName[0:6]:  UNKOWN,
	_LanguageName[6:8]:       JP,
	_LanguageLowerName[6:8]:  JP,
	_LanguageName[8:10]:      EN,
	_LanguageLowerName[8:10]: EN,
}

var _LanguageNames = []string{
	_LanguageName[0:6],
	_LanguageName[6:8],
	_LanguageName[8:10],
}

// LanguageString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LanguageString(s string) (Language, error) {
	if val, ok := _LanguageNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LanguageNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Language values", s)
}

// LanguageValues returns all values of the enum
func LanguageValues() []Language {
	return _LanguageValues
}

// LanguageStrings returns a slice of all String values of the enum
func LanguageStrings() []string {
	strs := make([]string, len(_LanguageNames))
	copy(strs, _LanguageNames)
	return strs
}

// IsALanguage returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Language) IsALanguage() bool {
	for _, v := range _LanguageValues {
		if i == v {
			return true
		}
	}
	return false
}
